import pandas as pd
import streamlit as st
import datetime

# Fonction principale pour ex√©cuter l'application
def main():
    # Interface de l'application
    st.title("üìä S√©paration par num√©ro")
    # Cr√©er le nom du fichier avec la date et l'heure
    current_time = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M")

    # Fonction pour transformer les num√©ros
    def transform_number(number):
        """Appliquer les r√®gles de transformation des num√©ros."""
        if number.startswith('0'):
            return number  # Aucun changement si le num√©ro commence par 0
        elif number.startswith('212'):
            return '0' + number[3:]  # Remplacer '212' par un format correct
        else:
            return '0' + number  # Ajouter un 0 si le num√©ro ne commence ni par 0 ni par 212

    # T√©l√©chargement du fichier Excel contenant les d√©tails
    st.subheader("1Ô∏è‚É£ Charger le fichier Excel contenant les d√©tails des appels et SMS")
    excel_file = st.file_uploader("Charger le fichier Excel", type="xlsx")

    # T√©l√©chargement du fichier texte contenant les num√©ros
    st.subheader("2Ô∏è‚É£ Charger le fichier texte contenant les num√©ros")
    num_file = st.file_uploader("Charger le fichier des num√©ros (num.txt)", type="txt")

    # V√©rification que les deux fichiers sont t√©l√©charg√©s
    if excel_file and num_file:
        # Lecture du fichier Excel
        try:
            details_df = pd.read_excel(excel_file, dtype={'Appelant': str, 'Appel√©': str})
            # Afficher l'aper√ßu du fichier Excel charg√©
            st.write("Aper√ßu du fichier Excel charg√© :")
            st.write(details_df.head())

            # Afficher le nombre de lignes dans le fichier Excel initial
            st.subheader(f"Nombre total de lignes dans le fichier Excel : {len(details_df)}")
            
        except Exception as e:
            st.error(f"Erreur lors de la lecture du fichier Excel : {e}")

        # V√©rification de la colonne 'Appelant' et 'Appel√©'
        if 'Appelant' not in details_df.columns or 'Appel√©' not in details_df.columns:
            st.error("Les colonnes 'Appelant' ou 'Appel√©' ne sont pas pr√©sentes dans le fichier Excel.")
        
        else:
            # Appliquer les r√®gles de transformation des num√©ros pour les num√©ros dans le fichier texte
            numeros_list = num_file.read().decode('latin1').strip().split(';')
            
            # Appliquer la fonction transform_number sur chaque num√©ro dans la liste
            numeros_list = [transform_number(numero) for numero in numeros_list]

            # Afficher le nombre total de num√©ros dans le fichier texte apr√®s transformation
            st.subheader(f"Nombre total de num√©ros : {len(numeros_list)}")

            # Appliquer la transformation sur les colonnes 'Appelant' et 'Appel√©' dans le DataFrame
            details_df['Appelant'] = details_df['Appelant'].apply(transform_number)
            details_df['Appel√©'] = details_df['Appel√©'].apply(transform_number)

            # Initialisation du writer pour cr√©er un fichier Excel avec une feuille par num√©ro
            output_file = f'Details_par_numero_{current_time}.xlsx'
            line_counts = []  # Liste pour stocker le nombre de lignes par num√©ro
            non_found_numbers = []  # Liste pour stocker les num√©ros non trouv√©s
            seen_numbers = set()
            
            with pd.ExcelWriter(output_file, engine='xlsxwriter') as writer:
                for numero in numeros_list:

                    # Filtrer les lignes pour le type '√âmis'
                    emitted_df = details_df[details_df['Type'] == '√âmis']
                    emitted_df = emitted_df[emitted_df['Appelant'] == numero]
                    
                    # Filtrer les lignes pour le type 'Re√ßu'
                    received_df = details_df[details_df['Type'] == 'Re√ßu']
                    received_df = received_df[received_df['Appel√©'] == numero]
                    
                    # Combiner les deux DataFrames sans doublons
                    numero_df = pd.concat([emitted_df, received_df]).drop_duplicates()


                    # Si des donn√©es sont trouv√©es, les √©crire dans une feuille d√©di√©e
                    if not numero_df.empty:
                        if numero not in seen_numbers:
                            # √âcrire les donn√©es dans la feuille Excel pour ce num√©ro
                            numero_df.to_excel(writer, sheet_name=str(numero), index=False)
                            
                            # Ajouter le num√©ro √† l'ensemble des num√©ros d√©j√† rencontr√©s
                            seen_numbers.add(numero)
                            
                            # Ajouter l'information dans la liste line_counts
                            line_counts.append({"Num√©ro": numero, "Nombre d'op√©rations": str(len(numero_df))})
               
                    else:
                        non_found_numbers.append(numero)  # Ajouter le num√©ro √† la liste des non trouv√©s

            # Convertir les r√©sultats en DataFrame pour un affichage sous forme de tableau
            line_counts_df = pd.DataFrame(line_counts).sort_values(by="Nombre d'op√©rations", ascending=False, ignore_index=True)

            # Afficher le tableau avec le nombre d'op√©rations par num√©ro
            st.subheader("Nombre d'op√©rations par num√©ro :")
            st.write(line_counts_df)
            
            # Calculer la somme totale des op√©rations
            total_operations = line_counts_df["Nombre d'op√©rations"].astype(int).sum()
            
            # Afficher la somme totale des op√©rations
            st.subheader(f"Total des op√©rations : {total_operations}")

            # Afficher la liste des num√©ros pour lesquels aucune donn√©e n'a √©t√© trouv√©e
            if non_found_numbers:
                st.subheader("Num√©ros non trouv√©s :")
                st.write(non_found_numbers)

            # Bouton pour t√©l√©charger le fichier Excel g√©n√©r√©
            st.subheader("T√©l√©charger le fichier Excel avec les d√©tails par num√©ro")
            with open(output_file, "rb") as f:
                st.download_button(
                    label="üíæ T√©l√©charger le fichier Excel",
                    data=f,
                    file_name=output_file,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
    else:
        st.info("Veuillez t√©l√©charger les deux fichiers pour lancer l'analyse.")

# Lancer l'application
#if __name__ == "__main__":
  #  main()
